#
#                              ITF1788
#
#   Interval Test Framework for IEEE 1788 Standard for Interval Arithmetic
#
#
#   Copyright 2014-2015
#
#   Marco Nehmeier (nehmeier@informatik.uni-wuerzburg.de)
#   Maximilian Kiesner (maximilian.kiesner@stud-mail.uni-wuerzburg.de)
#   Oliver Heimlich (oheim@posteo.de)
#
#   Department of Computer Science
#   University of Wuerzburg, Germany
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# This is the arithmetic definition for the GNU Octave interval package
# http://octave.sourceforge.net/interval/

imports: |
    %!function n = decval (dec)
    %!    n = find (strcmp (dec, {"ill", "trv", "def", "dac", "com"}));
    %!endfunction
preamble: |

# intervals
nai_interval_double: nai
empty_interval_double: infsup
entire_interval_double: infsup (-inf, inf)
decorated_empty_interval_double: infsupdec (empty, $DEC)
decorated_entire_interval_double: infsupdec (entire, $DEC)
inf_sup_interval_double: infsup ($ARG1, $ARG2)
decorated_inf_sup_interval_double: infsupdec ($ARG1, $ARG2, $DEC)

# interval decorators
decorator_com: '"com"'
decorator_def: '"def"'
decorator_dac: '"dac"'
decorator_ill: '"ill"'
decorator_trv: '"trv"'

# comparison operators for decorations
decorator_less_equals: decval ($ARG1) <= decval ($ARG2)
decorator_greater_equals: decval ($ARG1) >= decval ($ARG2)

op_decorationPart*: decorationpart ($ARG1) {1}

# overlap literal translations
overlap_bothEmpty: '"bothEmpty"'
overlap_firstEmpty: '"firstEmpty"'
overlap_secondEmpty: '"secondEmpty"'
overlap_before: '"before"'
overlap_meets: '"meets"'
overlap_overlaps: '"overlaps"'
overlap_starts: '"starts"'
overlap_containedBy: '"containedBy"'
overlap_finishes: '"finishes"'
overlap_equals: '"equals"'
overlap_finishedBy: '"finishedBy"'
overlap_contains: '"contains"'
overlap_startedBy: '"startedBy"'
overlap_overlappedBy: '"overlappedBy"'
overlap_metBy: '"metBy"'
overlap_after: '"after"'

# Cancellative addition and subtraction
op_cancelMinus*: cancelminus ($ARG1, $ARG2)
op_cancelPlus*: cancelplus ($ARG1, $ARG2)

# Set operations
op_intersection*: intersect ($ARG1, $ARG2)
op_convexHull*: union ($ARG1, $ARG2)

# Constructors
op_numsToInterval*: infsup ($ARG1, $ARG2)
op_textToInterval*: infsupdec ($ARG1)
op_setDec*: infsupdec ($ARG1, $ARG2)
op_newDec*: newdec ($ARG1)

# Basic operations
op_pos*: |
    +$ARG1
    uplus ($ARG1)
op_neg*: |
    -$ARG1
    uminus ($ARG1)
op_add*: |
    $ARG1 + $ARG2
    plus ($ARG1, $ARG2)
op_sub*: |
    $ARG1 - $ARG2
    minus ($ARG1, $ARG2)
op_mul*: |
    $ARG1 .* $ARG2
    times ($ARG1, $ARG2)
op_div*: |
    $ARG1 ./ $ARG2
    rdivide ($ARG1, $ARG2)
op_recip*: inv ($ARG1)
op_sqr*: sqr ($ARG1)
op_sqrt*: realsqrt ($ARG1)
op_fma*: fma ($ARG1, $ARG2, $ARG3)

# Power functions
op_pown*: pown ($ARG1, $ARG2)
op_pow*: pow ($ARG1, $ARG2)
op_exp*: exp ($ARG1)
op_exp2*: pow2 ($ARG1)
op_exp10*: pow10 ($ARG1)
op_log*: log ($ARG1)
op_log2*: log2 ($ARG1)
op_log10*: log10 ($ARG1)

# Trigonometric/hyperbolic functions
op_sin*: sin ($ARG1)
op_cos*: cos ($ARG1)
op_tan*: tan ($ARG1)
op_asin*: asin ($ARG1)
op_acos*: acos ($ARG1)
op_atan*: atan ($ARG1)
op_atan2*: atan2 ($ARG1, $ARG2)
op_sinh*: sinh ($ARG1)
op_cosh*: cosh ($ARG1)
op_tanh*: tanh ($ARG1)
op_asinh*: asinh ($ARG1)
op_acosh*: acosh ($ARG1)
op_atanh*: atanh ($ARG1)

# Integer functions
op_sign*: sign ($ARG1)
op_ceil*: ceil ($ARG1)
op_floor*: floor ($ARG1)
op_trunc*: fix ($ARG1)
op_roundTiesToEven*: roundb ($ARG1)
op_roundTiesToAway*: round ($ARG1)

# Absmax functions
op_abs*: abs ($ARG1)
op_min*: min ($ARG1, $ARG2)
op_max*: max ($ARG1, $ARG2)

# Numeric functions of intervals
op_inf*: inf ($ARG1)
op_sup*: sup ($ARG1)
op_mid*: mid ($ARG1)
op_wid*: wid ($ARG1)
op_rad*: rad ($ARG1)
op_mag*: mag ($ARG1)
op_mig*: mig ($ARG1)

# Boolean functions of intervals
op_equal*: |
    eq ($ARG1, $ARG2)
    $ARG1 == $ARG2
op_subset*: subset ($ARG1, $ARG2)
op_interior*: interior ($ARG1, $ARG2)
op_disjoint*: disjoint ($ARG1, $ARG2)
op_isEmpty*: isempty ($ARG1)
op_isEntire*: isentire ($ARG1)
op_isNaI*: isnai ($ARG1)
op_less*: |
    le ($ARG1, $ARG2)
    $ARG1 <= $ARG2
op_strictLess*: |
    lt ($ARG1, $ARG2)
    $ARG1 < $ARG2
op_precedes*: precedes ($ARG1, $ARG2)
op_strictPrecedes*: strictprecedes ($ARG1, $ARG2)
op_isCommonInterval*: iscommoninterval ($ARG1)
op_isSingleton*: issingleton ($ARG1)
op_isMember*: ismember ($ARG1, $ARG2)

# Extended interval comparison
op_overlap*: overlap ($ARG1, $ARG2)

# Reverse-mode elementary functions
op_absRev*: absrev ($ARG1)
op_absRevBin*: absrev ($ARG1, $ARG2)
op_sqrRev*: sqrrev ($ARG1)
op_sqrRevBin*: sqrrev ($ARG1, $ARG2)
op_pownRev*: pownrev ($ARG1, $ARG2)
op_pownRevBin*: pownrev ($ARG1, $ARG2, $ARG3)
op_sinRev*: sinrev ($ARG1)
op_sinRevBin*: sinrev ($ARG1, $ARG2)
op_cosRev*: cosrev ($ARG1)
op_cosRevBin*: cosrev ($ARG1, $ARG2)
op_tanRev*: tanrev ($ARG1)
op_tanRevBin*: tanrev ($ARG1, $ARG2)
op_coshRev*: coshrev ($ARG1)
op_coshRevBin*: coshrev ($ARG1, $ARG2)
op_mulRev*: mulrev ($ARG1, $ARG2)
op_mulRevTen*: mulrev ($ARG1, $ARG2, $ARG3)
op_powRev1*: powrev1 ($ARG1, $ARG2, $ARG3)
op_powRev2*: powrev2 ($ARG1, $ARG2, $ARG3)
op_atan2Rev1*: atan2rev1 ($ARG1, $ARG2, $ARG3)
op_atan2Rev2*: atan2rev2 ($ARG1, $ARG2, $ARG3)

# Two output division
op_mulRevToPair*: |
    nthargout(1, 2, @mulrev, $ARG1, $ARG2)
    *** next output
    nthargout(2, 2, @mulrev, $ARG1, $ARG2)

# Recommended forward-mode elementary functions
op_rootn*: nthroot ($ARG1, $ARG2)
op_expm1*: expm1 ($ARG1)
op_logp1*: log1p ($ARG1)
op_hypot*: hypot ($ARG1, $ARG2)
op_rSqrt*: rsqrt ($ARG1)

# Reduction operations
op_dot_down*: mpfr_vector_dot_d (-inf, $ARG1, $ARG2)
op_dot_up*: mpfr_vector_dot_d (inf, $ARG1, $ARG2)
op_dot_zero*: mpfr_vector_dot_d (0, $ARG1, $ARG2)
op_dot_nearest*: mpfr_vector_dot_d (0.5, $ARG1, $ARG2)

op_sum_down*: mpfr_vector_sum_d (-inf, $ARG1)
op_sum_up*: mpfr_vector_sum_d (inf, $ARG1)
op_sum_zero*: mpfr_vector_sum_d (0, $ARG1)
op_sum_nearest*: mpfr_vector_sum_d (0.5, $ARG1)

op_sum_abs_down*: mpfr_vector_sum_d (-inf, abs ($ARG1))
op_sum_abs_up*: mpfr_vector_sum_d (inf, abs ($ARG1))
op_sum_abs_zero*: mpfr_vector_sum_d (0, abs ($ARG1))
op_sum_abs_nearest*: mpfr_vector_sum_d (0.5, abs ($ARG1))

op_sum_sqr_down*: mpfr_vector_dot_d (-inf, $ARG1, $ARG1)
op_sum_sqr_up*: mpfr_vector_dot_d (inf, $ARG1, $ARG1)
op_sum_sqr_zero*: mpfr_vector_dot_d (0, $ARG1, $ARG1)
op_sum_sqr_nearest*: mpfr_vector_dot_d (0.5, $ARG1, $ARG1)

